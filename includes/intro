<h1 id="introduction">Introduction</h1>

<p>The Dbljump API is a system for cataloging and serving data about video games and the video game industry.</p>

<p>It is part of a wider group of software, Dbljump, which is made up of:</p>

<ul>
<li>The Dbljump <a href="https://www.postgresql.org">PostgreSQL</a> database</li>
<li>The back-end dbljump/rails-api, a <a href="http://rubyonrails.org">Ruby on Rails</a> application that manages the database and provides the API described here. This is currently under development.</li>
<li>The front-end client dbljump/client-ember, an <a href="https://www.emberjs.com">Ember.js</a> application that provides a web user interface. This is currently under development.</li>
<li><a href="http://www.dbljump.com">Dbljump.com</a>, the web domain where it all comes together</li>
</ul>

<p>This API is therefore designed to be used exclusively by the Dbljump front-end client.</p>

<p>This documentation, which describes the features of the API and how to use them, is intended for use by the Dbljump development team. It was built with <a href="https://github.com/lord/slate">Slate</a> and is hosted with <a href="https://pages.github.com">GitHub Pages</a>.</p>

<p><strong>For more information, or if you want to contribute or join us, please visit <a href="http://www.dbljump.com">www.dbljump.com</a>.</strong></p>

<h2 id="how-to-use">How to use</h2>

<p>Basic rules for making API requests.</p>

<h3 id="domain">Domain</h3>

<p>URLs in this documentation exclude the domain where the production API is hosted. Prepend the current domain name to URLs when making requests, e.g. <code class="prettyprint">http://api.dbljump.com/articles/games</code>.</p>

<h3 id="json-api-specification">JSON API specification</h3>

<p>This API accepts and returns JSON data, following the JSON API specification as closely as possible.</p>

<p><a href="http://jsonapi.org">Read more about the specification</a>.</p>

<h3 id="http-headers-request-content-type-and-version">HTTP headers: request content-type and version</h3>

<p>In accordance with the JSON API spec, all requests must include two HTTP headers, which declare the content-type and API version number:</p>

<ul>
<li><code class="prettyprint">Accept:application/vnd.api+json; version={vnum}</code></li>
<li><code class="prettyprint">Content-Type:application/vnd.api+json; version={vnum}</code></li>
</ul>

<p>Replace <code class="prettyprint">{vnum}</code> with the API version number you want to use. The current version number is <code class="prettyprint">1</code>, and this is not expected to change anytime soon!</p>

<h3 id="http-headers-response-content-type">HTTP headers: response content-type</h3>

<p>Successful responses include the following HTTP header:</p>

<ul>
<li><code class="prettyprint">Content-Type:application/vnd.api+json; charset=utf-8</code></li>
</ul>

<h2 id="authorizing-requests-and-logging-in-users">Authorizing requests and logging in users</h2>

<p>Many Dbljump API requests require authorization. This API uses JWTs for authentication and authorization, instead of HTTP sessions. When authorization is needed, it must be provided via a <a href="https://jwt.io">JSON web token (JWT)</a> included in the <code class="prettyprint">Authorization</code> HTTP header.</p>

<p>The presence and <a href="#the-jwt-payload">payload content</a> of a JWT determines:</p>

<ul>
<li>whether or not a user is &lsquo;logged in&rsquo;</li>
<li>the authorization level of the user identified by the JWT</li>
<li>whether the request is authorized (based on the validity of the JWT and the user&rsquo;s authorization level)</li>
</ul>

<h3 id="http-headers-request-authorizations">HTTP headers: request authorizations</h3>

<p>A valid <code class="prettyprint">Authorization</code> header and JWT must always be <em>included</em> when the client user is logged in and always <em>excluded</em> when the client user is not logged in.</p>

<p>The header must be provided as follows:</p>

<ul>
<li><code class="prettyprint">Authorization:Bearer {user-jwt}</code></li>
</ul>

<p>Replace <code class="prettyprint">{user-jwt}</code> with a JWT returned by a successful <a href="#users-authentications">user authentication request</a>.</p>

<h3 id="the-jwt-payload">The JWT payload</h3>

<p>As well providing request authorization, JWTs contain a JSON payload the client can decode and use to identify the logged-in user.</p>

<table><thead>
<tr>
<th>JWT payload attribute</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td><code class="prettyprint">user_id</code></td>
<td>Can be used to <a href="#get-single-user">get the logged-in user&rsquo;s record</a>.</td>
</tr>
<tr>
<td><code class="prettyprint">user_role</code></td>
<td>Determines the user&rsquo;s authorization level. Can be <code class="prettyprint">member</code>, <code class="prettyprint">editor</code> or <code class="prettyprint">admin</code>.</td>
</tr>
<tr>
<td><code class="prettyprint">expiry</code></td>
<td>The JWT expiry date and time.</td>
</tr>
</tbody></table>

<h3 id="user-role-and-authorization-level">User role and authorization level</h3>

<p>API request authorization also depends on the <code class="prettyprint">role</code> of the user that the passed JWT belongs to.</p>

<p>Users can have one of three roles:</p>

<table><thead>
<tr>
<th>Role</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td><code class="prettyprint">member</code></td>
<td>Ordinary user. Can sign in and view pages but has very limited abilities.</td>
</tr>
<tr>
<td><code class="prettyprint">editor</code></td>
<td>Can create, edit (and in some cases delete) articles and images.</td>
</tr>
<tr>
<td><code class="prettyprint">admin</code></td>
<td>Can do everthing, including managing users, places, platform, genres and so on.</td>
</tr>
</tbody></table>

<p>This documentation describes the authorization level required to use each each API feature.</p>

<h2 id="using-url-queries">Using URL queries</h2>

<blockquote>
<p>URL query examples</p>
</blockquote>
<pre class="highlight plaintext"><code># Include all primary_image items related to articles in the response:
/articles/games?include=primary_image

# Specify sparse fieldsets for users and images (users are included by
# default):
/users/2/images?fields[users]=username,avatar&amp;fields[images]=title,thumb

# Use filter to only return items where kind == 'photo':
/media/images?filter[kind]=photo

# Specify 10 items per page and return page 5:
/users?page[size]=10&amp;page[number]=5

# Sort by two fields: kind (ascending) and created_by_id (descending
# as prepended by a dash):
/media/images?sort=kind,-created_by_id
</code></pre>
<p>This API supports five kinds of URL queries for fetching data, <a href="http://jsonapi.org/format/#fetching">as specified by JSON API</a>:</p>

<ul>
<li>included resources</li>
<li>sparse fieldsets</li>
<li>sorting</li>
<li>pagination</li>
<li>filtering by field values</li>
</ul>

<table><thead>
<tr>
<th>Query type</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td><code class="prettyprint">include</code></td>
<td>Include resources related to the main dataset.</td>
</tr>
<tr>
<td><code class="prettyprint">fields</code></td>
<td>Specify sparse fieldsets. You must provide the type(s) and field name(s).</td>
</tr>
<tr>
<td><code class="prettyprint">filter</code></td>
<td>Filter data by a given field and value.</td>
</tr>
<tr>
<td><code class="prettyprint">page[size]</code></td>
<td>Specify how many items should be on each page. Defaults to <code class="prettyprint">30</code>.</td>
</tr>
<tr>
<td><code class="prettyprint">page[number]</code></td>
<td>Specify the page number. Defaults to <code class="prettyprint">1</code>.</td>
</tr>
<tr>
<td><code class="prettyprint">sort</code></td>
<td>Sort the data by specified fields. Prepend the field name with a <code class="prettyprint">-</code> to sort descending.</td>
</tr>
</tbody></table>

<h3 id="filter-fields">Filter fields</h3>

<table><thead>
<tr>
<th>Record type</th>
<th>Filterable fields</th>
</tr>
</thead><tbody>
<tr>
<td>articles</td>
<td>type, kind, origin_date, origin_year, origin_place_id, ended, end_date, end_year, latest_place_id, status, created_by_id, last_review_outcome, last_reviewed_by_id, published_at</td>
</tr>
<tr>
<td>genres</td>
<td>created_by_id</td>
</tr>
<tr>
<td>places</td>
<td>kind, parent_id, created_by_id</td>
</tr>
<tr>
<td>platforms</td>
<td>holder_id, sphere, kind, parent_id, created_by_id</td>
</tr>
<tr>
<td>users</td>
<td>gender, role, birthday, country_id, activated_at</td>
</tr>
<tr>
<td>credits</td>
<td>credited_id, game_id, version_id, place_id, role, category</td>
</tr>
<tr>
<td>kinships</td>
<td>parent_id, child_id, kind, start_year, end_year</td>
</tr>
<tr>
<td>names</td>
<td>article_id, version_id, name_or_title, family_name, given_names, kind, writing_system, year_adopted, year_dropped, dropped</td>
</tr>
<tr>
<td>notes</td>
<td>article_id, version_id, type, category, cite_website, created_by_id</td>
</tr>
<tr>
<td>images</td>
<td>kind, year, date, place_id, uploaded_by_id, usage_type, usage_license_code, attributed_name</td>
</tr>
<tr>
<td>versions</td>
<td>game_id, platform_id, status, fps_target, fps_unlocked, res_w, res_h, res_unlocked</td>
</tr>
<tr>
<td>releases</td>
<td>version_id, place_id, date, year, physical, digital</td>
</tr>
</tbody></table>

<h3 id="sort-fields">Sort fields</h3>

<table><thead>
<tr>
<th>Record type</th>
<th>Sortable fields</th>
</tr>
</thead><tbody>
<tr>
<td>articles</td>
<td>type, sort_title, origin_date, origin_year, created_by_id, status, last_submitted_at, last_reviewed_at, last_review_outcome, published_at</td>
</tr>
<tr>
<td>genres</td>
<td>name, short_name, parent_id, created_by_id</td>
</tr>
<tr>
<td>places</td>
<td>name, formatted, type, kind, parent_id, created_by_id, iso_code</td>
</tr>
<tr>
<td>platforms</td>
<td>holder_id, name, short_name, sphere, kind, parent_id, created_by_id</td>
</tr>
<tr>
<td>users</td>
<td>email, family_name, gender, username, role, birthday, country_id, last_signed_in_at, sign_in_count, activation_sent_at, activated_at, password_reset_sent_at</td>
</tr>
<tr>
<td>credits</td>
<td>credited_id, game_id, version_id, place_id, role, category</td>
</tr>
<tr>
<td>kinships</td>
<td>kind, start_year, end_year</td>
</tr>
<tr>
<td>names</td>
<td>name_or_title, family_name, given_names, kind, writing_system, year_adopted, year_dropped, dropped</td>
</tr>
<tr>
<td>notes</td>
<td>type, category, cite_website, created_by_id</td>
</tr>
<tr>
<td>images</td>
<td>kind, title, year, date, place_id, uploaded_by_id, usage_type</td>
</tr>
<tr>
<td>versions</td>
<td>game_id, platform_id, status, fps_target, fps_unlocked, res_w, res_h, res_unlocked</td>
</tr>
<tr>
<td>releases</td>
<td>version_id, place_id, date, year, physical, digital</td>
</tr>
</tbody></table>
